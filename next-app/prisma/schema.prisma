datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  // sessions      Session[]
  friends       Friends[] @relation("UserFriends")
  friendOf      Friends[] @relation("FriendOfUser")

  friendRequestsSent     FriendRequest[] @relation("UserFriendsRequest")
  friendRequestsReceived FriendRequest[] @relation("FriendOfUserRequest")

  boards UsersBoards[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Friends {
  userId   String
  friendId String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserFriends")
  friend User @relation(fields: [friendId], references: [id], onDelete: Cascade, name: "FriendOfUser")

  @@id([userId, friendId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FriendRequest {
  userId   String
  friendId String
  status   FriendRequestStatus @default(PENDING)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserFriendsRequest")
  friend User @relation(fields: [friendId], references: [id], onDelete: Cascade, name: "FriendOfUserRequest")

  @@id([userId, friendId])
}

model Boards {
  boardId    String   @id @default(cuid())
  boardTitle String
  createdBy  String
  membersCnt Int
  membersId  String[]
  notesId    String[]
  notesCnt   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  notes   Notes[]
  members UsersBoards[]
}

model UsersBoards {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  boardId String
  board   Boards @relation(fields: [boardId], references: [boardId], onDelete: Cascade)

  @@id([userId, boardId])
}

model Notes {
  noteId    String   @id @default(cuid())
  boardId   String
  noteTitle String
  noteBody  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board Boards @relation(fields: [boardId], references: [boardId], onDelete: Cascade)
}
